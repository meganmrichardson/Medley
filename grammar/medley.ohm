Medley {
  Program    = Statement*
  Statement  = Function                              --declare
             | Assignment
             | Reassign
             | Declaration
             | Conditional
             | WLoop
             | FLoop
             | Print
             | Return
             | Call
             | Increment
             | Comment
  Assignment = stringberry id ("is" (strLit | noneLit)) "|"
             | intberry id ("is" (intLit | noneLit)) "|"
             | floatberry id ("is" (floatLit | noneLit)) "|"
             | boolberry id ("is" (boolLit | noneLit)) "|"
  Declaration= stringberry id "|"
             | intberry id "|"
             | floatberry id "|"
             | boolberry id "|"
  Reassign   = id ("is" Exp) "|"
  Conditional= "ifmelon" Exp Block ("elifmelon" Exp Block)*
               ("elsemelon" Block)?
  WLoop      = "whilemelon" Exp Block
  FLoop      = "formelon" (Assignment)? (Exp "|")? Increment? Block
  Block      = "->"Statement*"<-"
  Function   = blend id "(" Params ")" Block --declare
  Print      = juice Exp "|"
  Return     = "squeeze" Exp "|"
  Call       = id "(" Args ")" "|"                      --call
  Args       = ListOf<id, ",">
  Params     = type id ("," type id)*
  Exp        = Exp "orange" Exp2                        --binary
             | Exp2
  Exp2       = Exp2 "apple" Exp3                        --binary
             | Exp3
  Exp3       = Exp3 relop Exp4                          --binary
             | Exp4
  Exp4       = Exp4 ("plus" | "minus") Exp5             --binary
             | Exp5
  Exp5       = Exp5 mulop Exp6                          --binary
             | Exp6
  Exp6       = Exp7 "to the power of" Exp6              --binary
             | Exp7
  Exp7       = prefix Exp8                              --unary
             | Exp8
  Exp8       = Literal
             | id
             | "(" Exp ")"                              --unary                         
  Increment  = id ("++" | "--") "|"?
  Literal    = strLit
             | intLit
             | floatLit
             | boolLit
  strLit     = "\"" char* "\"" | "\'" char* "\'"
  char       = ~"\\" ~"\"" ~"\n" any
  intLit     = digit+
  floatLit   = digit+ ("." digit+)?
  boolLit    = "organic" | "gmo"
  noneLit    = "none"
  blend      = "blend" ~alnum
  juice      = "juice" ~alnum
  let        = "let" ~alnum
  stringberry= "stringberry" ~alnum
  intberry   = "intberry" ~alnum
  floatberry = "floatberry" ~alnum
  boolberry  = "boolberry" ~alnum
  relop      = "less" | "more" | "less equals" | "more equals" | "equals"
  mulop      = "times" | "divby" | "mod"
  prefix     = "-" | "not"
  type       = stringberry | intberry | floatberry | boolberry
  keyword    = let | juice | blend
  id         = ~keyword letter alnum*
  Comment    = "::" (~"\n" any)* ("\n" | end)
             | ":::" (~"\n" any)* ":::"
}
